[["/home/project/src/App.tsx","import React, { useState, useEffect, useRef } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport WordCloud from './components/WordCloud';\nimport ApiKeyForm from './components/ApiKeyForm';\n\nconst App: React.FC = () => {\n  const [apiKey, setApiKey] = useState<string>('');\n  const [question, setQuestion] = useState<string>('');\n  const [words, setWords] = useState<Array<{ text: string; value: number }>>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const generateWordCloud = async () => {\n    if (!apiKey || !question) {\n      setError('Please provide both API key and question.');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: \"llama2-70b-4096\",\n          messages: [\n            {\n              role: \"system\",\n              content: \"You are a helpful assistant that generates a list of relevant words for word cloud visualization.\"\n            },\n            {\n              role: \"user\",\n              content: `Generate a list of 30 relevant words for a word cloud based on this question: \"${question}\". Provide the words as a comma-separated list without explanations or additional text.`\n            }\n          ],\n          temperature: 0.7,\n          max_tokens: 256,\n          top_p: 1,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error?.message || `HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const content = data.choices[0].message.content;\n      const wordList = content.split(',').map(word => word.trim());\n\n      const wordFrequency: { [key: string]: number } = {};\n      wordList.forEach(word => {\n        wordFrequency[word] = (wordFrequency[word] || 0) + 1;\n      });\n\n      const newWords = Object.entries(wordFrequency).map(([text, value]) => ({ text, value }));\n      setWords(newWords);\n    } catch (error) {\n      console.error('Error generating word cloud:', error);\n      setError(`Failed to generate word cloud: ${(error as Error).message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const props = useSpring({\n    from: { background: 'linear-gradient(120deg, #000000, #2c3e50)' },\n    to: async (next) => {\n      while (true) {\n        await next({ background: 'linear-gradient(120deg, #2c3e50, #000000)' });\n        await next({ background: 'linear-gradient(120deg, #000000, #2c3e50)' });\n      }\n    },\n    config: { duration: 5000 },\n  });\n\n  return (\n    <animated.div style={props} className=\"min-h-screen flex flex-col items-center justify-center p-4 text-white\">\n      <div className=\"w-full max-w-md mb-8\">\n        <h1 className=\"text-3xl font-bold mb-4 text-center\">Dynamic Word Cloud Generator</h1>\n        <ApiKeyForm apiKey={apiKey} setApiKey={setApiKey} />\n        <div className=\"mt-4\">\n          <input\n            type=\"text\"\n            value={question}\n            onChange={(e) => setQuestion(e.target.value)}\n            placeholder=\"Enter your question\"\n            className=\"w-full px-4 py-2 rounded bg-gray-800 text-white border border-gray-700 focus:outline-none focus:border-blue-500\"\n          />\n        </div>\n        <button\n          onClick={generateWordCloud}\n          disabled={loading}\n          className=\"w-full mt-4 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out transform hover:scale-105\"\n        >\n          {loading ? 'Generating...' : 'Generate Word Cloud'}\n        </button>\n      </div>\n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\" role=\"alert\">\n          <strong className=\"font-bold\">Error: </strong>\n          <span className=\"block sm:inline\">{error}</span>\n        </div>\n      )}\n      <div ref={containerRef} className=\"w-full h-[calc(100vh-300px)] word-cloud-container\">\n        <WordCloud words={words} width={containerRef.current?.clientWidth || 800} height={containerRef.current?.clientHeight || 600} />\n      </div>\n    </animated.div>\n  );\n};\n\nexport default App;"]]